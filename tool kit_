{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f0bd43c-f680-42bf-bed7-5a4c994c4503",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "1. What is NumPy, and why is it widely used in Python?\n",
    "1. What is NumPy?\n",
    "NumPy (Numerical Python) is a popular Python library used for numerical and scientific computing. It provides support for multi-dimensional arrays (ndarrays) and offers a wide range of mathematical functions to operate on these arrays efficiently.\n",
    "2. Why is NumPy Widely Used in Python?\n",
    "Fast operations on arrays and matrices.\n",
    "\n",
    "Memory-efficient compared to regular Python lists.\n",
    "\n",
    "Supports broadcasting, which allows operations on arrays of different shapes.\n",
    "\n",
    "Used as the foundation for many data science libraries like Pandas, SciPy, and scikit-learn.\n",
    "\n",
    "Easy integration with C/C++ and Fortran code for high-performance computing.\n",
    "\n",
    "2. How does broadcasting work in NumPy?\n",
    "Broadcasting in NumPy allows you to perform arithmetic operations on arrays of different shapes and sizes without explicitly reshaping them.\n",
    "Key Idea:\n",
    "When performing operations between arrays, NumPy automatically expands the smaller array to match the shape of the larger array — without making actual copies, which makes it efficient.\n",
    "Example 1: Adding a scalar to an array\n",
    "import numpy as np\n",
    "\n",
    "a = np.array([1,2,3])\n",
    "\n",
    "b = 10\n",
    "\n",
    "result = a + b\n",
    "\n",
    "print(result)\n",
    "[11 12 13]\n",
    "Here, b (scalar) is broadcasted to [10, 10, 10] and added to a.\n",
    "Example 2: 2D and 1D array\n",
    "a = np.array([[1,2,3],[4,5,6]])\n",
    "\n",
    "b = np.array([10,20,30])\n",
    "\n",
    "result = a + b\n",
    "\n",
    "print(result)\n",
    "[[11 22 33]\n",
    " [14 25 36]]\n",
    "b is broadcasted row-wise to match the shape of a.\n",
    "Rules of Broadcasting:\n",
    "If arrays have different numbers of dimensions, prepend 1s to the smaller one.\n",
    "\n",
    "Two dimensions are compatible when:\n",
    "\n",
    "They are equal, or\n",
    "\n",
    "One of them is 1.\n",
    "\n",
    "3. What is a Pandas DataFrame?\n",
    "A Pandas DataFrame is a 2-dimensional, labeled data structure in Python, similar to a table in a database or an Excel spreadsheet.\n",
    "Key Features:\n",
    "Consists of rows and columns.\n",
    "\n",
    "Columns can hold different data types (e.g., int, float, string).\n",
    "\n",
    "Allows easy data manipulation, filtering, and analysis.\n",
    "\n",
    "Provides built-in functions for reading/writing data from files (CSV, Excel, etc.).\n",
    "\n",
    "Example:\n",
    "import pandas as pd\n",
    "data = {\n",
    "    \"name\" : [\"sonakshi\",\"Pratik\",\"Vijay\"],\n",
    "    \"Age\" : [27,21,26],\n",
    "    \"City\" : [\"Rajkot\",\"Jamnagar\",\"Khambhaliya\"]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(df)\n",
    "     name  Age         City\n",
    "0  soankshi 18       Rajkot\n",
    "1  Pratik   21     Jamnagar\n",
    "2   Vijay   26  Khambhaliya\n",
    "Why it is used:\n",
    "Makes data cleaning, analysis, and visualization much easier.\n",
    "\n",
    "Core component of data analytics and data science in Python.\n",
    "\n",
    "4. Explain the use of the groupby() method in Pandas.\n",
    "The groupby() method in Pandas is used to group data based on one or more columns. After grouping, you can perform aggregate operations like sum(), mean(), count(), etc., on each group.\n",
    "Purpose:\n",
    "Analyze data by categories or groups\n",
    "\n",
    "Useful for tasks like:\n",
    "\n",
    "Total sales per region\n",
    "\n",
    "Average marks per student\n",
    "\n",
    "Count of items per category\n",
    "\n",
    "Basic Syntax:\n",
    "df.groupby('column_name').aggregation_function()\n",
    "Example:\n",
    "import pandas as pd\n",
    "\n",
    "data = {\n",
    "    'Department': ['HR', 'HR', 'IT', 'IT', 'Finance'],\n",
    "    'Salary': [30000, 35000, 60000, 65000, 70000]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "grouped = df.groupby('Department')['Salary'].mean()\n",
    "print(grouped)\n",
    "Department\n",
    "Finance    70000.0\n",
    "HR         32500.0\n",
    "IT         62500.0\n",
    "Name: Salary, dtype: float64\n",
    "Common Aggregations:\n",
    ".sum() → Total of each group\n",
    "\n",
    ".mean() → Average of each group\n",
    "\n",
    ".count() → Number of entries per group\n",
    "\n",
    ".max() / .min() → Maximum / minimum value per group\n",
    "\n",
    "Summary:\n",
    "groupby() is powerful for summarizing and analyzing data efficiently by grouping it based on specific criteria.\n",
    "5. Why is Seaborn preferred for statistical visualizations?\n",
    "Seaborn is preferred for statistical visualizations in Python because it is built specifically for statistical plotting, offering simpler syntax and beautiful default styles. It is built on top of Matplotlib and integrates well with Pandas.\n",
    "Key Reasons Why Seaborn is Preferred:\n",
    "High-Level Interface\n",
    "Easy to use with fewer lines of code\n",
    "\n",
    "Handles complex plots like box plots, violin plots, and regression plots simply\n",
    "\n",
    "Beautiful Default Styles\n",
    "Makes charts look professional with less effort\n",
    "\n",
    "Built-in color palettes and themes\n",
    "\n",
    "Built-in Statistical Support\n",
    "Automatically adds statistical elements (e.g., confidence intervals in regression)\n",
    "\n",
    "Works great for visualizing distributions, categorical comparisons, and correlations\n",
    "\n",
    "Pandas Integration\n",
    "Works directly with DataFrames and column names\n",
    "\n",
    "No need to manually extract data like in Matplotlib\n",
    "\n",
    "Multiple Plot Types\n",
    "sns.histplot(), sns.boxplot(), sns.heatmap(), sns.pairplot(), sns.catplot() and many more\n",
    "\n",
    "Great for EDA (Exploratory Data Analysis)\n",
    "\n",
    "Example:\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "\n",
    "# Sample data\n",
    "tips = sns.load_dataset(\"tips\")\n",
    "\n",
    "tips\n",
    "total_bill\ttip\tsex\tsmoker\tday\ttime\tsize\n",
    "0\t16.99\t1.01\tFemale\tNo\tSun\tDinner\t2\n",
    "1\t10.34\t1.66\tMale\tNo\tSun\tDinner\t3\n",
    "2\t21.01\t3.50\tMale\tNo\tSun\tDinner\t3\n",
    "3\t23.68\t3.31\tMale\tNo\tSun\tDinner\t2\n",
    "4\t24.59\t3.61\tFemale\tNo\tSun\tDinner\t4\n",
    "...\t...\t...\t...\t...\t...\t...\t...\n",
    "239\t29.03\t5.92\tMale\tNo\tSat\tDinner\t3\n",
    "240\t27.18\t2.00\tFemale\tYes\tSat\tDinner\t2\n",
    "241\t22.67\t2.00\tMale\tYes\tSat\tDinner\t2\n",
    "242\t17.82\t1.75\tMale\tNo\tSat\tDinner\t2\n",
    "243\t18.78\t3.00\tFemale\tNo\tThur\tDinner\t2\n",
    "244 rows × 7 columns\n",
    "\n",
    "sns.boxplot(x=\"day\", y=\"tip\", data=tips)\n",
    "<Axes: xlabel='day', ylabel='tip'>\n",
    "\n",
    "This one line of code gives a clean and informative plot—something that takes more code in Matplotlib.\n",
    "Summary:\n",
    "Seaborn is preferred because it makes statistical visualizations easier, cleaner, and more informative—perfect for data analysis and data science work.\n",
    "6. What are the differences between NumPy arrays and Python lists?\n",
    "When working with data in Python, it's essential to understand the differences between NumPy arrays and Python lists. Although both are used to store collections of elements, they differ significantly in terms of performance, memory, and functionality.\n",
    "Performance\n",
    "NumPy Array: Faster (uses C-level optimizations)\n",
    "\n",
    "Python List: Slower (pure Python)\n",
    "\n",
    "Explanation:\n",
    "\n",
    "NumPy arrays are implemented in C and use optimized functions, making them much faster for numerical computations. Python lists, being high-level and written in pure Python, are slower for large-scale data operations.\n",
    "Memory Usage\n",
    "NumPy Array: Less memory\n",
    "\n",
    "Python List: More memory\n",
    "\n",
    "Explanation:\n",
    "\n",
    "NumPy arrays are more memory-efficient because they store data more compactly. Python lists have extra overhead since each element is a separate Python object.\n",
    "Data Type\n",
    "NumPy Array: Homogeneous (all elements same type)\n",
    "\n",
    "Python List: Heterogeneous (can mix data types)\n",
    "\n",
    "Explanation:\n",
    "\n",
    "In NumPy arrays, all elements must be of the same type, such as all integers or all floats. Python lists allow mixing data types like strings, integers, and booleans in a single list.\n",
    "Operations\n",
    "NumPy Array: Supports vectorized operations\n",
    "\n",
    "Python List: Requires loops for element-wise operations\n",
    "\n",
    "Explanation:\n",
    "\n",
    "NumPy supports vectorized operations that work on entire arrays at once, making code shorter and faster. In contrast, Python lists need manual loops to apply operations to each item.\n",
    "Functionality\n",
    "NumPy Array: Rich set of mathematical functions\n",
    "\n",
    "Python List: Basic operations only\n",
    "\n",
    "Explanation:\n",
    "\n",
    "NumPy comes with many built-in functions for mathematical and statistical analysis. Python lists are limited to basic methods like append, pop, and indexing.\n",
    "Multidimensional Support\n",
    "NumPy Array: Built-in support for multi-dimensional data\n",
    "\n",
    "Python List: Must nest lists (harder to manage)\n",
    "\n",
    "Explanation:\n",
    "\n",
    "NumPy makes it easy to work with matrices and higher-dimensional arrays. With Python lists, you have to manually nest lists inside other lists, which becomes complex and error-prone.\n",
    "Broadcasting\n",
    "NumPy Array: Supported\n",
    "\n",
    "Python List: Not supported\n",
    "\n",
    "Explanation:\n",
    "\n",
    "NumPy arrays support broadcasting, which allows arithmetic operations between arrays of different shapes. Python lists do not have this feature.\n",
    "Example:\n",
    "NumPy array:\n",
    "import numpy as np\n",
    "\n",
    "a = np.array([1, 2, 3])\n",
    "b = a * 2\n",
    "print(b) \n",
    "[2 4 6]\n",
    "Python list:\n",
    "a = [1, 2, 3]\n",
    "b = [x * 2 for x in a]\n",
    "print(b) \n",
    "[2, 4, 6]\n",
    "NumPy does it faster and with simpler code.\n",
    "Summary:\n",
    "Use NumPy arrays when working with numerical data, large datasets, or doing scientific computing.\n",
    "\n",
    "Use Python lists for general-purpose programming with mixed data types.\n",
    "\n",
    "7. What is a heatmap, and when should it be used?\n",
    "A heatmap is a data visualization technique that uses color gradients to represent the magnitude or intensity of values in a matrix-like format. In Python, heatmaps are commonly created using libraries like Seaborn and Matplotlib.\n",
    "When Should a Heatmap Be Used?\n",
    "To visualize correlation between variables:\n",
    "Heatmaps are often used to display the correlation matrix in statistics and data analysis, helping identify relationships between features.\n",
    "To detect patterns in large datasets:\n",
    "They are useful for finding trends, hotspots, or outliers in large numerical datasets quickly.\n",
    "For comparison of values:\n",
    "Easily compare values across rows and columns using color intensity instead of raw numbers.\n",
    "For presenting data to non-technical audiences:\n",
    "The visual nature of heatmaps makes complex data more understandable for stakeholders or clients.\n",
    "Example Use Case\n",
    "In data analysis, you might use a heatmap to check which features (columns) in a DataFrame are strongly correlated, so you can select the most relevant ones for building a machine learning model.\n",
    "8. What does the term “vectorized operation” mean in NumPy?\n",
    "In NumPy, a vectorized operation refers to performing operations on entire arrays (vectors, matrices, etc.) without using explicit loops in Python.\n",
    "Key Points:\n",
    "Faster execution:\n",
    "Vectorized operations are executed at low-level C speed, making them significantly faster than Python loops.\n",
    "Cleaner code:\n",
    "Code using vectorized operations is shorter, easier to read, and less error-prone.\n",
    "Applies operations element-wise:\n",
    "For example, adding two arrays or multiplying each element by a scalar happens element-wise automatically.\n",
    "Example:\n",
    "import numpy as np\n",
    "\n",
    "a = np.array([1, 2, 3])\n",
    "b = np.array([4, 5, 6])\n",
    "\n",
    "# Vectorized addition\n",
    "c = a + b\n",
    "print(c)  \n",
    "[5 7 9]\n",
    "Instead of writing a loop to add each element, NumPy handles it internally using efficient vectorized code.\n",
    "9. How does Matplotlib differ from Plotly?\n",
    "When working with data visualizations in Python, Matplotlib and Plotly are two commonly used libraries. Both are powerful, but they serve different purposes and offer different features.\n",
    "Key Differences Between Matplotlib and Plotly:\n",
    "1. Interactivity\n",
    "Matplotlib: Creates static plots (images). Limited interactivity unless used with add-ons.\n",
    "\n",
    "Plotly: Designed for interactive plots—users can zoom, hover, and click on elements.\n",
    "\n",
    "2. Output Format\n",
    "Matplotlib: Outputs plots as static images (PNG, PDF, etc.).\n",
    "\n",
    "Plotly: Outputs plots as interactive HTML or JavaScript-based visualizations.\n",
    "\n",
    "3. Ease of Use\n",
    "Matplotlib: More flexible but requires more code and setup.\n",
    "\n",
    "Plotly: Easier to create interactive plots with less code.\n",
    "\n",
    "4. Customization\n",
    "Matplotlib: Very customizable but with a steeper learning curve.\n",
    "\n",
    "Plotly: Provides many custom options out-of-the-box with simple syntax.\n",
    "\n",
    "5. Use Case\n",
    "Matplotlib: Good for academic papers, static reports, or basic plotting needs.\n",
    "\n",
    "Plotly: Best for dashboards, web-based applications, and interactive data exploration.\n",
    "\n",
    "Conclusion:\n",
    "Use Matplotlib when you need static, publication-quality visuals, and use Plotly when you need interactive, web-friendly visualizations.\n",
    "10. What is the significance of hierarchical indexing in Pandas?\n",
    "Hierarchical indexing, also known as multi-level indexing, is a powerful feature in Pandas that allows you to have multiple levels of indexes (row or column labels) on a single axis of a DataFrame or Series.\n",
    "Significance and Benefits:\n",
    "Organizes complex data:\n",
    "Enables working with higher-dimensional data in a 2-dimensional structure, making it easier to represent and analyze grouped or nested data.\n",
    "Efficient data selection:\n",
    "Allows for more precise and flexible data selection, slicing, and aggregation at multiple levels of the index.\n",
    "Simplifies data manipulation:\n",
    "Facilitates operations like grouping, pivoting, and reshaping data without losing important hierarchical context.\n",
    "Improves readability:\n",
    "Presents data in a clear and structured way, especially when dealing with multi-dimensional datasets such as time series or panel data.\n",
    "Example Use Case:\n",
    "Imagine sales data organized by Year and Region. Hierarchical indexing lets you easily access sales for a specific year or region without needing separate DataFrames.\n",
    "11. What is the role of Seaborn’s pairplot() function?\n",
    "The pairplot() function in Seaborn is used to create a matrix of scatter plots (and optionally histograms) for pairwise relationships between multiple variables in a dataset.\n",
    "Key Roles of pairplot():\n",
    "Visualize relationships between variables:\n",
    "Helps to quickly see how every numerical variable relates to every other variable.\n",
    "Explore distributions:\n",
    "Displays the distribution of each variable on the diagonal (usually as histograms or KDE plots).\n",
    "Detect correlations and patterns:\n",
    "Useful for spotting trends, clusters, or outliers across variable pairs.\n",
    "Great for exploratory data analysis (EDA):\n",
    "Provides an overview of dataset features in a compact, visual format.\n",
    "Example Use:\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "\n",
    "df = sns.load_dataset('iris')\n",
    "sns.pairplot(df, hue='species')\n",
    "<seaborn.axisgrid.PairGrid at 0x1f059363200>\n",
    "\n",
    "12. What is the purpose of the describe() function in Pandas?\n",
    "The describe() function in Pandas is used to generate descriptive statistics of a DataFrame or Series. It provides a quick summary of the central tendency, dispersion, and shape of the dataset’s distribution.\n",
    "Purpose and Benefits:\n",
    "Summarizes numerical data:\n",
    "Shows count, mean, standard deviation, minimum, maximum, and quartiles (25%, 50%, 75%) of numerical columns.\n",
    "Helps in understanding data:\n",
    "Gives a quick insight into the spread and central values of the data, which is helpful for data exploration.\n",
    "Detects anomalies:\n",
    "By looking at min, max, and standard deviation, it helps spot unusual values or outliers.\n",
    "Works with categorical data (when specified):\n",
    "Can also summarize categorical columns by showing counts, unique values, top frequent value, and frequency.\n",
    "Example:\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'Age': [23, 45, 31, 35, 22],\n",
    "    'Salary': [50000, 60000, 52000, 58000, 49000]\n",
    "})\n",
    "\n",
    "print(df.describe())\n",
    "             Age       Salary\n",
    "count   5.000000      5.00000\n",
    "mean   31.200000  53800.00000\n",
    "std     9.444575   4919.34955\n",
    "min    22.000000  49000.00000\n",
    "25%    23.000000  50000.00000\n",
    "50%    31.000000  52000.00000\n",
    "75%    35.000000  58000.00000\n",
    "max    45.000000  60000.00000\n",
    "This outputs a summary with count, mean, std, min, quartiles, and max for the Age and Salary columns.\n",
    "13. Why is handling missing data important in Pandas?\n",
    "Handling missing data is crucial because missing or incomplete data can significantly affect the accuracy and quality of data analysis and modeling.\n",
    "Reasons why handling missing data is important:\n",
    "Prevents errors in calculations:\n",
    "Many functions and algorithms may fail or give incorrect results if missing values are not addressed.\n",
    "Improves data quality:\n",
    "Filling or removing missing values helps maintain the integrity of the dataset.\n",
    "Ensures accurate insights:\n",
    "Proper handling of missing data prevents biased or misleading analysis outcomes.\n",
    "Supports better model performance:\n",
    "Machine learning models often require complete datasets; missing values can reduce model accuracy.\n",
    "Maintains consistency:\n",
    "Consistent data format helps in smooth processing and visualization.\n",
    "In Pandas, missing data can be handled by:\n",
    "Dropping missing values (dropna())\n",
    "\n",
    "Filling missing values (fillna())\n",
    "\n",
    "Interpolating or using advanced imputation techniques\n",
    "\n",
    "14. What are the benefits of using Plotly for data visualization?\n",
    "Plotly is a powerful and interactive data visualization library in Python. It offers several benefits, making it a popular choice for modern data analysts and scientists.\n",
    "Benefits of Using Plotly:\n",
    "Interactive Visualizations:\n",
    "Unlike static charts, Plotly creates dynamic charts where users can zoom, pan, hover, and click for more details.\n",
    "High-Quality Aesthetics:\n",
    "Plotly charts are visually appealing and look professional, ideal for reports and dashboards.\n",
    "Wide Range of Charts:\n",
    "Supports many types of charts including bar charts, scatter plots, 3D plots, maps, heatmaps, and more.\n",
    "Web Integration:\n",
    "Plotly charts can be embedded into web applications using tools like Dash, making it ideal for real-time dashboards.\n",
    "Export Options:\n",
    "Visuals can be easily exported to HTML, PNG, JPEG, SVG, and PDF formats.\n",
    "No Extra Setup for Basic Use:\n",
    "Works seamlessly in Jupyter notebooks and supports both online and offline modes.\n",
    "Customizability:\n",
    "Highly customizable with support for themes, templates, and annotations.\n",
    "When to Use Plotly:\n",
    "When interactive charts are needed\n",
    "\n",
    "When presenting insights to a non-technical audience\n",
    "\n",
    "For building dashboards and reports\n",
    "\n",
    "15. How does NumPy handle multidimensional arrays?\n",
    "NumPy handles multidimensional arrays through its core object called the ndarray (N-dimensional array). This allows NumPy to efficiently store and manipulate large amounts of numerical data in multiple dimensions.\n",
    "Key Points on NumPy and Multidimensional Arrays:\n",
    "N-dimensional Support:\n",
    "NumPy arrays can have any number of dimensions—1D, 2D, 3D, and beyond. Each dimension is called an axis.\n",
    "Shape Attribute:\n",
    "The .shape attribute shows the size along each dimension.\n",
    "Example: A 2D array with 3 rows and 4 columns will have .shape = (3, 4).\n",
    "Efficient Storage:\n",
    "NumPy stores all data in a contiguous block of memory, which improves access speed and reduces memory usage.\n",
    "Indexing and Slicing:\n",
    "You can easily access or slice data across any axis.\n",
    "Example: array[0, 1] accesses the element in the first row, second column of a 2D array.\n",
    "Broadcasting:\n",
    "Operations between arrays of different shapes are supported using broadcasting rules, which stretch the arrays to match shapes during computation.\n",
    "Reshaping Arrays:\n",
    "You can change the shape of an array using .reshape() without changing its data.\n",
    "Example: array.reshape(2, 3) turns a 1D array of 6 elements into a 2D array.\n",
    "Conclusion:\n",
    "NumPy’s ability to handle multidimensional arrays makes it extremely powerful for scientific computing, machine learning, and data analysis. It simplifies working with matrices, tensors, and high-dimensional data with speed and clarity.\n",
    "16. What is the role of Bokeh in data visualization?\n",
    "Bokeh is a powerful Python library used for interactive and web-based data visualization. It allows you to create rich, interactive plots that can be easily embedded into web applications or dashboards.\n",
    "Key Roles of Bokeh:\n",
    "Interactive Visualizations:\n",
    "Bokeh supports tools like zoom, pan, hover, and click, allowing users to explore data visually in real-time.\n",
    "Web Integration:\n",
    "It generates plots as HTML and JavaScript, which can be directly embedded in websites without needing extra tools.\n",
    "Large Dataset Handling:\n",
    "Bokeh can handle streaming and large datasets efficiently, making it useful for real-time dashboards and monitoring.\n",
    "Customizable Plots:\n",
    "You can create complex, layered plots such as bar charts, scatter plots, line graphs, heatmaps, and more, with high customization.\n",
    "Server Capabilities:\n",
    "With Bokeh Server, you can build interactive web applications with Python callbacks that update plots dynamically.\n",
    "Conclusion:\n",
    "Bokeh is ideal when your goal is to build interactive, visually appealing, and browser-friendly plots or dashboards using Python. It bridges the gap between the power of Python and modern web-based visualizations.\n",
    "17. Explain the difference between apply() and map() in Pandas.\n",
    "In Pandas, both apply() and map() are used to apply functions to data, but they are used in different contexts and have different capabilities.\n",
    "map()\n",
    "Used With:\n",
    "Series (1D only)\n",
    "Purpose:\n",
    "Used to transform or map values in a Series by applying a function or a mapping dictionary.\n",
    "Example:\n",
    "import pandas as pd\n",
    "s = pd.Series([1, 2, 3])\n",
    "s.map(lambda x: x * 2)\n",
    "0    2\n",
    "1    4\n",
    "2    6\n",
    "dtype: int64\n",
    "Use Case:\n",
    "Simple operations on a single Series (like transforming values).\n",
    "apply()\n",
    "Used With:\n",
    "Both Series and DataFrame\n",
    "Purpose:\n",
    "Applies a function along an axis of a DataFrame (rows or columns), or to each element of a Series.\n",
    "Example with Series:\n",
    "s.apply(lambda x: x + 1)\n",
    "0    2\n",
    "1    3\n",
    "2    4\n",
    "dtype: int64\n",
    "Example with DataFrame:\n",
    "df.apply(sum, axis=0)  \n",
    "df.apply(sum, axis=1)  \n",
    "0    50023\n",
    "1    60045\n",
    "2    52031\n",
    "3    58035\n",
    "4    49022\n",
    "dtype: int64\n",
    "Use Case:\n",
    "More powerful and flexible. Use when working with DataFrames or when more complex logic is needed.\n",
    "Summary:\n",
    "Use map() when working with a single Series and doing simple transformations.\n",
    "\n",
    "Use apply() when working with DataFrames or when you need to apply a function across rows or columns.\n",
    "\n",
    "18. What are some advanced features of NumPy?\n",
    "NumPy, beyond basic array operations, offers many advanced features that make it powerful for scientific and analytical computing. Here are some of the key advanced features:\n",
    "Broadcasting\n",
    "\n",
    "Allows operations on arrays of different shapes.\n",
    "\n",
    "NumPy automatically stretches the smaller array to match the shape of the larger one.\n",
    "\n",
    "Vectorized Operations\n",
    "\n",
    "Perform operations on entire arrays without explicit loops.\n",
    "\n",
    "Much faster than standard Python loops.\n",
    "\n",
    "Masking and Boolean Indexing\n",
    "\n",
    "Enables selecting or modifying elements using conditions.\n",
    "\n",
    "Example: arr[arr > 5] selects all elements greater than 5.\n",
    "\n",
    "Advanced Slicing\n",
    "\n",
    "Allows multidimensional slicing using ranges, steps, or conditions.\n",
    "Memory Mapping\n",
    "\n",
    "Used for reading large binary files efficiently.\n",
    "\n",
    "Enables handling datasets larger than RAM.\n",
    "\n",
    "Broadcasting with np.newaxis\n",
    "\n",
    "Reshapes arrays for broadcasting compatibility.\n",
    "\n",
    "Useful in reshaping 1D to 2D or higher dimensions.\n",
    "\n",
    "Universal Functions (ufuncs)\n",
    "\n",
    "Optimized functions like np.add, np.sin, np.exp that work element-wise on arrays.\n",
    "\n",
    "Support broadcasting, type casting, and more.\n",
    "\n",
    "Structured Arrays\n",
    "\n",
    "Arrays with compound data types (like records or structs).\n",
    "\n",
    "Useful for datasets with mixed data types.\n",
    "\n",
    "Linear Algebra Support\n",
    "\n",
    "Functions like dot(), inv(), eig(), svd(), etc., for advanced matrix operations.\n",
    "\n",
    "Found in numpy.linalg.\n",
    "\n",
    "Random Module\n",
    "\n",
    "Powerful tools for generating random numbers, distributions, and simulations (numpy.random).\n",
    "These advanced features make NumPy highly efficient and essential for large-scale data manipulation, numerical computing, and scientific analysis in Python.\n",
    "19. How does Pandas simplify time series analysis?\n",
    "Pandas provides powerful, flexible, and easy-to-use tools that make time series analysis straightforward and efficient. Here's how it simplifies the process:\n",
    "Date Parsing and Indexing\n",
    "\n",
    "Pandas can automatically recognize and parse dates when reading data (e.g., parse_dates=True in read_csv()).\n",
    "\n",
    "The DatetimeIndex allows easy indexing and slicing based on date/time.\n",
    "\n",
    "Resampling\n",
    "\n",
    "With methods like .resample(), you can change the frequency of time series data (e.g., daily to monthly).\n",
    "\n",
    "Useful for aggregating or downsampling data using mean, sum, etc.\n",
    "\n",
    "Frequency Conversion\n",
    "\n",
    "Convert between different time frequencies using simple syntax (e.g., 'M' for month, 'D' for day).\n",
    "\n",
    "Helps align data based on specific time intervals.\n",
    "\n",
    "Rolling and Expanding Windows\n",
    "\n",
    "Methods like .rolling() and .expanding() support moving average calculations and cumulative statistics.\n",
    "\n",
    "Ideal for smoothing time series and identifying trends.\n",
    "\n",
    "Shifting and Lagging\n",
    "\n",
    ".shift() allows you to create lagged versions of a time series for trend analysis or prediction.\n",
    "\n",
    "Useful for calculating change over time.\n",
    "\n",
    "Time Zone Handling\n",
    "\n",
    "Pandas supports conversion between time zones with .tz_convert() and localization with .tz_localize().\n",
    "Date Range Generation\n",
    "\n",
    "Create custom time-based sequences using pd.date_range().\n",
    "Built-in Plotting\n",
    "\n",
    "Easily visualize trends with .plot() on time series data, with automatic date formatting on axes.\n",
    "20. What is the role of a pivot table in Pandas?\n",
    "A pivot table in Pandas is a powerful tool that allows you to summarize, analyze, and reorganize data in a DataFrame. It is especially useful when working with large datasets that need to be grouped and aggregated meaningfully.\n",
    "Key Roles and Benefits:\n",
    "Data Summarization:\n",
    "It helps in summarizing data by grouping rows and calculating aggregate values like sum, mean, count, etc.\n",
    "Reorganizing Data:\n",
    "It reshapes the data by turning unique values from one column into multiple columns (like in Excel).\n",
    "Improved Readability:\n",
    "By creating a compact table of grouped data, it becomes easier to analyze trends or patterns.\n",
    "Custom Aggregation:\n",
    "You can apply different aggregation functions like sum, mean, count, min, max, etc., for different views of your data.\n",
    "Filtering and Sorting:\n",
    "Pivot tables can be customized to include specific subsets of data or to sort rows/columns for better insights.\n",
    "Example Usage:\n",
    "import pandas as pd\n",
    "\n",
    "data = {\n",
    "    'Department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT'],\n",
    "    'Month': ['Jan', 'Feb', 'Jan', 'Feb', 'Jan', 'Feb'],\n",
    "    'Revenue': [200, 220, 150, 160, 300, 310]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "pivot = df.pivot_table(values='Revenue', index='Department', columns='Month', aggfunc='sum')\n",
    "print(pivot)\n",
    "Month       Feb  Jan\n",
    "Department          \n",
    "HR          160  150\n",
    "IT          310  300\n",
    "Sales       220  200\n",
    "In Summary:\n",
    "Pandas pivot tables are essential for data summarization and transformation, offering a concise and flexible way to analyze datasets — similar to Excel pivot tables but more powerful in code.\n",
    "21. Why is NumPy’s array slicing faster than Python’s list slicing?\n",
    "NumPy's array slicing is significantly faster than slicing standard Python lists due to several key reasons:\n",
    "Fixed Data Types (Homogeneity)\n",
    "NumPy arrays store elements of the same data type in a contiguous block of memory. This uniformity allows for efficient memory management and faster data access.\n",
    "Contiguous Memory Allocation Unlike Python lists, which are pointers to objects scattered in memory, NumPy arrays store data in a single, continuous memory block. This improves CPU cache performance and speeds up data operations like slicing.\n",
    "Vectorized Operations NumPy uses vectorized operations (implemented in C), which operate at a lower level and avoid the overhead of Python loops. Slicing in NumPy doesn't copy data; it just creates a view on the original array, saving both time and memory.\n",
    "Optimized Internal Code (C/Fortran) NumPy is written in C and Fortran, which are much faster than Python’s interpreted nature. The slicing operations are performed using these low-level languages, making them far more efficient.\n",
    "Summary:\n",
    "NumPy’s array slicing is faster than Python list slicing because it uses contiguous memory blocks, fixed data types, and optimized C-based operations. This makes NumPy ideal for high-performance numerical computations.\n",
    "22. What are some common use cases for Seaborn?\n",
    "Seaborn is a powerful Python data visualization library built on top of Matplotlib. It is widely used in data science and analytics due to its ability to create informative and attractive statistical graphics with minimal code.\n",
    "Here are some common use cases:\n",
    "Exploratory Data Analysis (EDA)\n",
    "Seaborn is ideal for exploring datasets by visualizing distributions, relationships, and trends. It provides high-level interfaces for drawing attractive and informative charts.\n",
    "Statistical Visualizations\n",
    "It comes with built-in functions to show distributions, regression lines, categorical comparisons, and confidence intervals, which are helpful in analyzing patterns.\n",
    "Heatmaps for Correlation Matrices\n",
    "A popular use of Seaborn is creating heatmaps to visualize correlation between features in a dataset, making it easy to spot strong or weak relationships.\n",
    "Visualizing Grouped Data\n",
    "Using functions like boxplot(), violinplot(), and barplot(), Seaborn allows easy comparison between groups or categories.\n",
    "Pairwise Relationship Plots\n",
    "The pairplot() function creates a grid of scatter plots for each pair of numerical features, helping to understand relationships and distributions across multiple variables.\n",
    "Time Series Data Visualization\n",
    "With lineplot(), Seaborn can be used to show trends over time, which is useful for time series analysis.\n",
    "Summary:\n",
    "Seaborn is commonly used for EDA, statistical analysis, correlation heatmaps, group comparisons, and relationship visualizations. Its simplicity and beauty make it a go-to library for data scientists and analysts.\n",
    "Practical\n",
    "1. How do you create a 2D NumPy array and calculate the sum of each row?\n",
    "import numpy as np\n",
    "\n",
    "a = np.array([[1,2,3],[4,5,6]])\n",
    "\n",
    "print('Numpy array',a.ndim)\n",
    "\n",
    "print('sum',np.sum(a,axis=1))\n",
    "Numpy array 2\n",
    "sum [ 6 15]\n",
    "2. Write a Pandas script to find the mean of a specific column in a DataFrame.\n",
    "import pandas as pd\n",
    "\n",
    "data = {\n",
    "    'Name' : ['sonakshi','Pratik','Jaysukh','Ravi'],\n",
    "    'Score' : [95,90,85,80]\n",
    "}\n",
    "\n",
    "df1 = pd.DataFrame(data)\n",
    "\n",
    "mean_score = df1['Score'].mean()\n",
    "\n",
    "print('The mean of Score column', mean_score)\n",
    "The mean of Score column 87.5\n",
    "3. Create a scatter plot using Matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "x = [1, 2, 3, 4, 5]\n",
    "y = [10, 8, 6, 4, 2]\n",
    "\n",
    "\n",
    "plt.scatter(x, y)\n",
    "\n",
    "\n",
    "plt.title(\"Simple Scatter Plot\")\n",
    "plt.xlabel(\"X Axis\")\n",
    "plt.ylabel(\"Y Axis\")\n",
    "\n",
    "\n",
    "plt.show()\n",
    "\n",
    "4. How do you calculate the correlation matrix using Seaborn and visualize it with a heatmap?\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "data = {\n",
    "    'Math': [85, 90, 78, 92, 88],\n",
    "    'Science': [80, 85, 75, 95, 90],\n",
    "    'English': [78, 83, 85, 80, 82]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "\n",
    "correlation_matrix = df.corr()\n",
    "\n",
    "\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
    "\n",
    "\n",
    "plt.title(\"Correlation Matrix Heatmap\")\n",
    "plt.show()\n",
    "\n",
    "5. Generate a bar plot using Plotly\n",
    "import plotly.express as px\n",
    "\n",
    "\n",
    "data = {\n",
    "    'Name': ['Sonakshi', 'Pratik', 'Jaysukh', 'Ravi'],\n",
    "    'Score': [95, 90, 85, 80]\n",
    "}\n",
    "\n",
    "\n",
    "fig = px.bar(data, x='Name', y='Score', title='Scores of Students')\n",
    "\n",
    "\n",
    "fig.show()\n",
    "6. Create a DataFrame and add a new column based on an existing column\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "data = {\n",
    "    'Name': ['Sonakshi', 'Pratik', 'Jaysukh', 'Ravi'],\n",
    "    'Score': [95, 90, 85, 80]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "\n",
    "df['Result'] = df['Score'].apply(lambda x: 'Pass' if x >= 85 else 'Fail')\n",
    "\n",
    "\n",
    "print(df)\n",
    "      Name  Score Result\n",
    "0   Vishal     95   Pass\n",
    "1   Pratik     90   Pass\n",
    "2  Jaysukh     85   Pass\n",
    "3     Ravi     80   Fail\n",
    "7. Write a program to perform element-wise multiplication of two NumPy arrays\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "a = np.array([1, 2, 3])\n",
    "b = np.array([4, 5, 6])\n",
    "\n",
    "\n",
    "result = a * b\n",
    "\n",
    "\n",
    "print(\"Result of element-wise multiplication:\", result)\n",
    "Result of element-wise multiplication: [ 4 10 18]\n",
    "8. Create a line plot with multiple lines using Matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "x = [1, 2, 3, 4, 5]\n",
    "y1 = [10, 15, 20, 25, 30]\n",
    "y2 = [5, 10, 15, 10, 5]\n",
    "\n",
    "\n",
    "plt.plot(x, y1, label='Line 1', color='blue', marker='o')\n",
    "plt.plot(x, y2, label='Line 2', color='green', marker='x')\n",
    "\n",
    "\n",
    "plt.title('Multiple Line Plot')\n",
    "plt.xlabel('X-axis')\n",
    "plt.ylabel('Y-axis')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "plt.show()\n",
    "\n",
    "9. Generate a Pandas DataFrame and filter rows where a column value is greater than a threshold\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "data = {\n",
    "    'Name': ['Sonakshi', 'Pratik', 'Jaysukh', 'Ravi'],\n",
    "    'Score': [95, 90, 85, 80]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "\n",
    "filtered_df = df[df['Score'] > 85]\n",
    "\n",
    "\n",
    "print(filtered_df)\n",
    "     Name  Score\n",
    "0  Vishal     95\n",
    "1  Pratik     90\n",
    "10. Create a histogram using Seaborn to visualize a distribution\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "data = [12, 15, 14, 10, 13, 17, 15, 18, 14, 16, 12, 14, 13, 15, 16]\n",
    "\n",
    "\n",
    "sns.histplot(data, bins=5, kde=False)\n",
    "\n",
    "\n",
    "plt.show()\n",
    "\n",
    "11. Perform matrix multiplication using NumPy\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "A = np.array([[1, 2],\n",
    "              [3, 4]])\n",
    "\n",
    "B = np.array([[5, 6],\n",
    "              [7, 8]])\n",
    "\n",
    "\n",
    "C = np.dot(A, B)\n",
    "\n",
    "\n",
    "print(C)\n",
    "[[19 22]\n",
    " [43 50]]\n",
    "12. Use Pandas to load a CSV file and display its first 5 rows\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "df = pd.read_csv('sample_data.csv')\n",
    "\n",
    "\n",
    "print(df.head())\n",
    "      Name  Age  Score\n",
    "0  sonakshi  25     95\n",
    "1   Pratik   23     90\n",
    "2  Jaysukh   27     85\n",
    "3     Ravi   22     80\n",
    "4    Anita   24     88\n",
    "13. Create a 3D scatter plot using Plotly.\n",
    "import plotly.graph_objs as go\n",
    "\n",
    "\n",
    "x = [1, 2, 3, 4, 5]\n",
    "y = [10, 11, 12, 13, 14]\n",
    "z = [5, 6, 7, 8, 9]\n",
    "\n",
    "\n",
    "fig = go.Figure(data=[go.Scatter3d(\n",
    "    x=x,\n",
    "    y=y,\n",
    "    z=z,\n",
    "    mode='markers',\n",
    "    marker=dict(\n",
    "        size=8,\n",
    "        color=z,               \n",
    "        colorscale='Viridis',   \n",
    "        opacity=0.8\n",
    "    )\n",
    ")])\n",
    "\n",
    "\n",
    "fig.show()\n",
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2024.02-py310",
   "language": "python",
   "name": "conda-env-anaconda-2024.02-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
